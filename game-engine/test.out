#include "platform_layer.h"
#include <math.h>
#include <stdio.h>

internal void EngineOutputSound(engine_sound_buffer *SoundBuffer) {
  // Fill a buffer.
  double phase = 0;
  uint32_t bufferIndex = 0;
  while (bufferIndex < AUDIOBUFFERSIZEINBYTES) {
    phase += (2 * PI) / SAMPLESPERCYCLE;
    int16 sample = (int16)(sin(phase) * INT16_MAX * VOLUME);
    SoundBuffer->SampleOut[bufferIndex++] =
        (byte)sample; // little-endian low byte
    SoundBuffer->SampleOut[bufferIndex++] =
        (byte)(sample >> 8); // little-endian high byte
  }
}

internal void RenderWeirdGradient(engine_offscreen_buffer *Buffer,
                                  int BlueOffset, int GreenOffset) {
  int Pitch = Buffer->Width * Buffer->BytesPerPixel;
  uint8_t *Row = (uint8_t *)Buffer->Memory;
  for (int Y = 0; Y < Buffer->Height; ++Y) {
    uint32_t *Pixel = (uint32_t *)Row;
    for (int X = 0; X < Buffer->Width; ++X) {
      uint8_t Blue = (X + BlueOffset);
      uint8_t Green = (Y + GreenOffset);
      *Pixel++ = ((Green << 8) | Blue);
    }
    Row += Pitch;
  }
}

void engineUpdate(engine_memory *Memory, engine_offscreen_buffer *Buffer,
                  engine_sound_buffer *SoundBuffer) {
  engine_state *EngineState = (engine_state *)Memory->PermanentStorage;
  if (!Memory->IsInitialized) {
    Memory->IsInitialized = true;
    char *Filename = __FILE__;
    debug_read_file_result File = DEBUGPlatformReadEntireFile(Filename);
    if (File.Contents) {
      DEBUGPlatformWriteEntireFile("test.out", File.ContentsSize,
                                   File.Contents);
      DEBUGPlatformFreeFileMemory(File.Contents);
    }
  }
  EngineState->BlueOffset++;
  EngineState->GreenOffset++;
  RenderWeirdGradient(Buffer, EngineState->BlueOffset,
                      EngineState->GreenOffset);
  if (!SoundBuffer->SoundPlaying) {
    SoundBuffer->SoundPlaying = true;
    EngineOutputSound(SoundBuffer);
  }
}

void inputEvent(InputEvent *inputEvent) {
  printf("Input: %i %i\n", inputEvent->inputEventType,
         inputEvent->inputEventKeyCode);
}

int main() { platformMain(engineUpdate, inputEvent); }
